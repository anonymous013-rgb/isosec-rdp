name: ISOSEC Singapore RDP

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 360

    steps:
      - name: Enable RDP and Configure Firewall
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1 -Force
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
          echo "✅ RDP and Firewall Enabled."

      - name: Create Custom User
        run: |
          $username = "isosec"
          $password = "Risma@786"
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force
          
          if (Get-LocalUser -Name $username -ErrorAction SilentlyContinue) {
            Remove-LocalUser -Name $username
          }
          
          New-LocalUser $username -Password $securePass -FullName "ISOSEC Singapore RDP User"
          Add-LocalGroupMember -Group "Administrators" -Member $username
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member $username
          echo "✅ User '$username' created."

      - name: Install Latest Tailscale
        run: |
          Invoke-WebRequest -Uri "https://pkgs.tailscale.com/stable/tailscale-setup-latest.exe" -OutFile "tailscale-setup.exe"
          Start-Process -FilePath ".\tailscale-setup.exe" -ArgumentList "/S" -Wait
          echo "✅ Latest Tailscale installed."

      - name: Connect to Tailscale
        id: ts
        run: |
          & "C:\Program Files\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname="sg-rdp-${{ github.run_id }}" --tags=tag:ci
          $tsIP = & "C:\Program Files\Tailscale\tailscale.exe" ip -4
          echo "ts_ip=$tsIP" >> $env:GITHUB_OUTPUT

      - name: Setup Singapore VPN (ProtonVPN OpenVPN)
        run: |
          # Install Chocolatey
          Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          
          # Install OpenVPN
          choco install openvpn -y
          
          # Create auth file
          $authContent = "${{ secrets.PROTON_OVPN_USERNAME }}`n${{ secrets.PROTON_OVPN_PASSWORD }}"
          $authContent | Out-File -FilePath "auth.txt" -Encoding ASCII
          
          # Run OpenVPN in background (connect to Singapore)
          Start-Process -FilePath "C:\Program Files\OpenVPN\bin\openvpn.exe" -ArgumentList "--config sg-proton.ovpn", "--auth-user-pass auth.txt", "--daemon" -NoNewWindow -Wait
          
          # Wait a bit for connection
          Start-Sleep -Seconds 30
          
          # Verify IP (should show Singapore)
          Invoke-RestMethod -Uri "https://ipinfo.io/json" | Select-Object country, city
          echo "✅ Connected to Singapore VPN via OpenVPN. Outbound traffic now from Singapore."

      - name: Keep Runner Alive & Display Credentials
        run: |
          Write-Host "✅ Singapore RDP session active via Tailscale + OpenVPN."
          Write-Host ""
          Write-Host "========== RDP DETAILS =========="
          Write-Host "   IP Address: ${{ steps.ts.outputs.ts_ip }}"
          Write-Host "   Username:   isosec"
          Write-Host "   Password:   Risma@786"
          Write-Host "   Location:   Real Singapore (via ProtonVPN OpenVPN)"
          Write-Host "================================="
          Write-Host ""
          Write-Host "This connection will remain active for up to 6 hours."
          
          while ($true) {
            Start-Sleep -Seconds 60
          }
